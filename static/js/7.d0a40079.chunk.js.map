{"version":3,"sources":["../node_modules/three/examples/jsm/postprocessing/Pass.js","../node_modules/three/examples/jsm/shaders/CopyShader.js","components/FrontText.tsx","../node_modules/three/examples/jsm/postprocessing/RenderPass.js","../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","../node_modules/three/examples/jsm/postprocessing/MaskPass.js","../node_modules/three/examples/jsm/postprocessing/EffectComposer.js","../node_modules/three/examples/jsm/shaders/LuminosityHighPassShader.js","../node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js","pages/luminous-box/LuminousBox.tsx"],"names":["Pass","this","enabled","needsSwap","clear","renderToScreen","Object","assign","prototype","setSize","render","console","error","FullScreenQuad","camera","OrthographicCamera","geometry","PlaneBufferGeometry","material","_mesh","Mesh","defineProperty","get","set","value","dispose","renderer","CopyShader","uniforms","vertexShader","join","fragmentShader","theme","css","FrontText","props","title","RenderPass","scene","overrideMaterial","clearColor","clearAlpha","call","undefined","clearDepth","create","constructor","writeBuffer","readBuffer","oldClearColor","oldClearAlpha","oldOverrideMaterial","oldAutoClear","autoClear","getClearColor","getHex","getClearAlpha","setClearColor","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","ShaderPass","shader","textureID","ShaderMaterial","UniformsUtils","clone","defines","fsQuad","texture","MaskPass","inverse","writeValue","clearValue","context","getContext","state","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getSize","Vector2","_pixelRatio","getPixelRatio","_width","width","_height","height","WebGLRenderTarget","name","renderTarget1","renderTarget2","passes","copyPass","clock","Clock","swapBuffers","tmp","addPass","pass","push","insertPass","index","splice","isLastEnabledPass","passIndex","i","length","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","LuminosityHighPassShader","shaderID","Color","UnrealBloomPass","resolution","strength","radius","threshold","x","y","pars","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","generateMipmaps","renderTargetHorizonal","renderTargetVertical","highPassShader","highPassUniforms","materialHighPassFilter","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomTintColors","Vector3","copyShader","copyUniforms","materialCopy","blending","AdditiveBlending","depthTest","depthWrite","transparent","basic","MeshBasicMaterial","copy","map","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","extend","Box","mesh","useRef","useState","active","setActive","useFrame","current","rotation","ref","position","scale","onClick","e","attach","args","Effects","useThree","gl","composer","fog","THREE","useEffect","Fragment","attachArray","window","innerWidth","innerHeight","Scene","LuminousBox"],"mappings":"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","file":"static/js/7.d0a40079.chunk.js","sourcesContent":["import {\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tMesh\n} from \"../../../build/three.module.js\";\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\n\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\": { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float opacity;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\"\tgl_FragColor = opacity * texel;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { CopyShader };\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nconst theme = css`\n    color: white;\n    position: absolute;\n    top: 2%;\n    left: 5%;\n    z-index: 100;\n    font-family: Sans-Serif;\n`;\n\ninterface FrontTextProps {\n    title: string\n}\n\nconst FrontText: React.FC<FrontTextProps> = (props) => {\n    return (\n        <div css={theme}>\n            <h1>{props.title}</h1>\n        </div >\n    )\n};\n\nexport default FrontText;","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\n};\n\nRenderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: RenderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tvar oldClearColor, oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n} );\n\nexport { RenderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tShaderMaterial,\n\tUniformsUtils\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { ShaderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n} );\n\n\nvar ClearMaskPass = function () {\n\n\tPass.call( this );\n\n\tthis.needsSwap = false;\n\n};\n\nClearMaskPass.prototype = Object.create( Pass.prototype );\n\nObject.assign( ClearMaskPass.prototype, {\n\n\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n} );\n\nexport { MaskPass, ClearMaskPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tClock,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from \"../../../build/three.module.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n","/**\n * @author bhouston / http://clara.io/\n *\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nimport {\n\tColor\n} from \"../../../build/three.module.js\";\n\nvar LuminosityHighPassShader = {\n\n\tshaderID: \"luminosityHighPass\",\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"luminosityThreshold\": { value: 1.0 },\n\t\t\"smoothWidth\": { value: 1.0 },\n\t\t\"defaultColor\": { value: new Color( 0x000000 ) },\n\t\t\"defaultOpacity\": { value: 0.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform vec3 defaultColor;\",\n\t\t\"uniform float defaultOpacity;\",\n\t\t\"uniform float luminosityThreshold;\",\n\t\t\"uniform float smoothWidth;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\"\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\",\n\n\t\t\"\tfloat v = dot( texel.xyz, luma );\",\n\n\t\t\"\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\",\n\n\t\t\"\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\",\n\n\t\t\"\tgl_FragColor = mix( outputColor, texel, alpha );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { LuminosityHighPassShader };\n","/**\n * @author spidersharma / http://eduperiment.com/\n */\n\nimport {\n\tAdditiveBlending,\n\tColor,\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\n\n/**\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * Reference:\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nvar UnrealBloomPass = function ( resolution, strength, radius, threshold ) {\n\n\tPass.call( this );\n\n\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\tthis.radius = radius;\n\tthis.threshold = threshold;\n\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t// create color only once here, reuse it later inside the render function\n\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t// render targets\n\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\tthis.renderTargetsHorizontal = [];\n\tthis.renderTargetsVertical = [];\n\tthis.nMips = 5;\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tvar renderTargetHorizonal = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\tvar renderTargetVertical = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// luminosity high pass material\n\n\tif ( LuminosityHighPassShader === undefined )\n\t\tconsole.error( \"UnrealBloomPass relies on LuminosityHighPassShader\" );\n\n\tvar highPassShader = LuminosityHighPassShader;\n\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = threshold;\n\tthis.highPassUniforms[ \"smoothWidth\" ].value = 0.01;\n\n\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\tuniforms: this.highPassUniforms,\n\t\tvertexShader: highPassShader.vertexShader,\n\t\tfragmentShader: highPassShader.fragmentShader,\n\t\tdefines: {}\n\t} );\n\n\t// Gaussian Blur Materials\n\tthis.separableBlurMaterials = [];\n\tvar kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// Composite material\n\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\tthis.compositeMaterial.uniforms[ \"blurTexture1\" ].value = this.renderTargetsVertical[ 0 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture2\" ].value = this.renderTargetsVertical[ 1 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture3\" ].value = this.renderTargetsVertical[ 2 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture4\" ].value = this.renderTargetsVertical[ 3 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture5\" ].value = this.renderTargetsVertical[ 4 ].texture;\n\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = strength;\n\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = 0.1;\n\tthis.compositeMaterial.needsUpdate = true;\n\n\tvar bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\tthis.compositeMaterial.uniforms[ \"bloomFactors\" ].value = bloomFactors;\n\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ),\n\t\t\t\t\t\t\t new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t// copy material\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( \"UnrealBloomPass relies on CopyShader\" );\n\n\t}\n\n\tvar copyShader = CopyShader;\n\n\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\tthis.copyUniforms[ \"opacity\" ].value = 1.0;\n\n\tthis.materialCopy = new ShaderMaterial( {\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: AdditiveBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true\n\t} );\n\n\tthis.enabled = true;\n\tthis.needsSwap = false;\n\n\tthis.oldClearColor = new Color();\n\tthis.oldClearAlpha = 1;\n\n\tthis.basic = new MeshBasicMaterial();\n\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\n\n};\n\nUnrealBloomPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: UnrealBloomPass,\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tvar resx = Math.round( width / 2 );\n\t\tvar resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t},\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tthis.oldClearColor.copy( renderer.getClearColor() );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tvar inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t},\n\n\tgetSeperableBlurMaterial: function ( kernelRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"KERNEL_RADIUS\": kernelRadius,\n\t\t\t\t\"SIGMA\": kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"colorTexture\": { value: null },\n\t\t\t\t\"texSize\": { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t\"direction\": { value: new Vector2( 0.5, 0.5 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\n\\\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat x = float(i);\\\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\n\t\t\t\t}\"\n\t\t} );\n\n\t},\n\n\tgetCompositeMaterial: function ( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"NUM_MIPS\": nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"blurTexture1\": { value: null },\n\t\t\t\t\"blurTexture2\": { value: null },\n\t\t\t\t\"blurTexture3\": { value: null },\n\t\t\t\t\"blurTexture4\": { value: null },\n\t\t\t\t\"blurTexture5\": { value: null },\n\t\t\t\t\"dirtTexture\": { value: null },\n\t\t\t\t\"bloomStrength\": { value: 1.0 },\n\t\t\t\t\"bloomFactors\": { value: null },\n\t\t\t\t\"bloomTintColors\": { value: null },\n\t\t\t\t\"bloomRadius\": { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D blurTexture1;\\\n\t\t\t\tuniform sampler2D blurTexture2;\\\n\t\t\t\tuniform sampler2D blurTexture3;\\\n\t\t\t\tuniform sampler2D blurTexture4;\\\n\t\t\t\tuniform sampler2D blurTexture5;\\\n\t\t\t\tuniform sampler2D dirtTexture;\\\n\t\t\t\tuniform float bloomStrength;\\\n\t\t\t\tuniform float bloomRadius;\\\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\n\t\t\t\t\\\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\n\t\t\t\t}\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\n\t\t\t\t}\"\n\t\t} );\n\n\t}\n\n} );\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n","/** @jsx jsx */\nimport React, { useRef, useState, useEffect, MutableRefObject } from 'react';\nimport { extend, Canvas, useFrame, useThree } from 'react-three-fiber';\nimport { css, jsx } from '@emotion/core';\nimport * as THREE from 'three';\n\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { WebGLRenderer, OrthographicCamera, PerspectiveCamera } from 'three';\nimport FrontText from '../../components/FrontText';\n\nextend({ EffectComposer, RenderPass, UnrealBloomPass })\n\nconst theme = css`\n    width: 100vw;\n    height: 100vh;\n    z-index: -100;\n    background-color: $black;\n`;\n\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            'effectComposer': { children: Element[]; ref: MutableRefObject<EffectComposer | undefined>; args: WebGLRenderer[]; },\n            'renderPass': { attachArray: string; args: (THREE.Scene | OrthographicCamera | PerspectiveCamera)[]; },\n            'unrealBloomPass': { attachArray: string; args: (number | THREE.Vector2)[]; },\n        }\n    }\n}\n\ninterface BoxProps {\n    position: [number, number, number];\n};\n\nconst Box: React.FC<BoxProps> = (props) => {\n    const mesh = useRef<THREE.Mesh>();\n    const [active, setActive] = useState(false);\n\n    useFrame(() => {\n        if (mesh.current) {\n            mesh.current.rotation.x += 0.005;\n            mesh.current.rotation.y += 0.01;\n        }\n    })\n\n    return (\n        <mesh\n            ref={mesh}\n            position={props.position}\n            scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n            onClick={e => setActive(!active)}\n        >\n            <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n            <meshNormalMaterial attach=\"material\" />\n        </mesh>\n    );\n};\n\nconst Effects = () => {\n    const { gl, scene, camera, size } = useThree();\n    const composer = useRef<EffectComposer>();\n    scene.fog = new THREE.Fog(0x000000, 1, 1000);\n\n    useEffect(() => {\n        if (composer.current)\n            composer.current.setSize(size.width, size.height)\n    }, [size]);\n\n    useFrame(() => {\n        if (composer.current) {\n            composer.current.render();\n        };\n    }, 10);\n\n    return (\n        <React.Fragment>\n            <effectComposer ref={composer} args={[gl]}>\n                <renderPass attachArray=\"passes\" args={[scene, camera]} />\n                <unrealBloomPass attachArray=\"passes\" args={[new THREE.Vector2(window.innerWidth, window.innerHeight), 2.0, 1.0, 0]} />\n            </effectComposer>\n        </React.Fragment>\n    )\n}\n\nconst Scene = () => {\n    return (\n        <React.Fragment>\n            <ambientLight />\n            <Box position={[0, 0, 0]} />\n            <Effects />\n        </React.Fragment>\n    )\n}\n\nconst LuminousBox = () => {\n    return (\n        <React.Fragment>\n            <FrontText title=\"Luminous Box\" />\n            <div css={theme}>\n                <Canvas>\n                    <Scene />\n                </Canvas>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default LuminousBox;\n"],"sourceRoot":""}