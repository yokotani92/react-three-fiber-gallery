{"version":3,"sources":["components/FrontText.tsx","pages/luminous-and-halftone-box/LuminousAndHalftoneBox.tsx"],"names":["StyledText","styled","h1","FrontText","props","title","extend","EffectComposer","RenderPass","UnrealBloomPass","HalftonePass","CanvasStyle","div","Box","mesh","useRef","useState","active","setActive","useFrame","current","rotation","x","y","ref","position","scale","onClick","e","attach","args","Effects","useThree","gl","scene","camera","size","composer","fog","THREE","useEffect","setSize","width","height","render","Fragment","attachArray","window","innerWidth","innerHeight","Scene","LuminousBox"],"mappings":"uWAGA,IAAMA,E,MAAaC,EAAOC,GAAV,KAmBDC,IAN6B,SAACC,GACzC,OACI,kBAACJ,EAAD,KAAaI,EAAMC,S,4SCN3BC,YAAO,CAAEC,mBAAgBC,eAAYC,sBACrCH,YAAO,CAAEC,mBAAgBC,eAAYE,mBAErC,IAAMC,EAAcV,IAAOW,IAAV,KAsBXC,EAA0B,SAACT,GAC7B,IAAMU,EAAOC,mBAD0B,EAEXC,oBAAS,GAFE,mBAEhCC,EAFgC,KAExBC,EAFwB,KAWvC,OAPAC,aAAS,WACDL,EAAKM,UACLN,EAAKM,QAAQC,SAASC,GAAK,KAC3BR,EAAKM,QAAQC,SAASE,GAAK,QAK/B,0BACIC,IAAKV,EACLW,SAAUrB,EAAMqB,SAChBC,MAAOT,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,GACzCU,QAAS,SAAAC,GAAC,OAAIV,GAAWD,KAEzB,uCAAmBY,OAAO,WAAWC,KAAM,CAAC,EAAG,EAAG,KAClD,wCAAoBD,OAAO,eAKjCE,EAAU,WAAO,IAAD,EACkBC,cAA5BC,EADU,EACVA,GAAIC,EADM,EACNA,MAAOC,EADD,EACCA,OAAQC,EADT,EACSA,KACrBC,EAAWtB,mBAcjB,OAbAmB,EAAMI,IAAM,IAAIC,MAAU,EAAU,EAAG,KAEvCC,qBAAU,WACFH,EAASjB,SACTiB,EAASjB,QAAQqB,QAAQL,EAAKM,MAAON,EAAKO,UAC/C,CAACP,IAEJjB,aAAS,WACDkB,EAASjB,SACTiB,EAASjB,QAAQwB,WAEtB,IAGC,kBAAC,IAAMC,SAAP,KACI,oCAAgBrB,IAAKa,EAAUP,KAAM,CAACG,IAClC,gCAAYa,YAAY,SAAShB,KAAM,CAACI,EAAOC,KAC/C,qCAAiBW,YAAY,SAAShB,KAAM,CAAC,IAAIS,UAAcQ,OAAOC,WAAYD,OAAOE,aAAc,EAAK,EAAK,KACjH,kCAAcH,YAAY,cAMpCI,EAAQ,WACV,OACI,kBAAC,IAAML,SAAP,KACI,uCACA,kBAAChC,EAAD,CAAKY,SAAU,CAAC,EAAG,EAAG,KACtB,kBAACM,EAAD,QAkBGoB,UAbK,WAChB,OACI,kBAAC,IAAMN,SAAP,KACI,kBAAC,IAAD,CAAWxC,MAAM,4BACjB,kBAACM,EAAD,KACI,kBAAC,IAAD,KACI,kBAACuC,EAAD","file":"static/js/11.8c2765f3.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledText = styled.h1`\n    color: white;\n    position: absolute;\n    top: 2%;\n    left: 5%;\n    z-index: 100;\n    font-family: Sans-Serif;\n`;\n\ninterface FrontTextProps {\n    title: string\n}\n\nconst FrontText: React.FC<FrontTextProps> = (props) => {\n    return (\n        <StyledText>{props.title}</StyledText>\n    )\n};\n\nexport default FrontText;","import React, { useRef, useState, useEffect, MutableRefObject } from 'react';\nimport { extend, Canvas, useFrame, useThree } from 'react-three-fiber';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\n\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { HalftonePass } from 'three/examples/jsm/postprocessing/HalftonePass';\nimport { WebGLRenderer, OrthographicCamera, PerspectiveCamera } from 'three';\nimport FrontText from '../../components/FrontText';\n\nextend({ EffectComposer, RenderPass, UnrealBloomPass })\nextend({ EffectComposer, RenderPass, HalftonePass })\n\nconst CanvasStyle = styled.div`\n    width: 100vw;\n    height: 100vh;\n    z-index: -100;\n    background-color: $black;\n`;\n\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            'effectComposer': { children: Element[]; ref: MutableRefObject<EffectComposer | undefined>; args: WebGLRenderer[]; },\n            'renderPass': { attachArray: string; args: (THREE.Scene | OrthographicCamera | PerspectiveCamera)[]; },\n            'unrealBloomPass': { attachArray: string; args: (number | THREE.Vector2)[]; },\n            'halftonePass': { attachArray: string; },\n        }\n    }\n}\n\ninterface BoxProps {\n    position: [number, number, number];\n};\n\nconst Box: React.FC<BoxProps> = (props) => {\n    const mesh = useRef<THREE.Mesh>();\n    const [active, setActive] = useState(false);\n\n    useFrame(() => {\n        if (mesh.current) {\n            mesh.current.rotation.x += 0.005;\n            mesh.current.rotation.y += 0.01;\n        }\n    })\n\n    return (\n        <mesh\n            ref={mesh}\n            position={props.position}\n            scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n            onClick={e => setActive(!active)}\n        >\n            <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n            <meshNormalMaterial attach=\"material\" />\n        </mesh>\n    );\n};\n\nconst Effects = () => {\n    const { gl, scene, camera, size } = useThree();\n    const composer = useRef<EffectComposer>();\n    scene.fog = new THREE.Fog(0x000000, 1, 1000);\n\n    useEffect(() => {\n        if (composer.current)\n            composer.current.setSize(size.width, size.height)\n    }, [size]);\n\n    useFrame(() => {\n        if (composer.current) {\n            composer.current.render();\n        };\n    }, 10);\n\n    return (\n        <React.Fragment>\n            <effectComposer ref={composer} args={[gl]}>\n                <renderPass attachArray=\"passes\" args={[scene, camera]} />\n                <unrealBloomPass attachArray=\"passes\" args={[new THREE.Vector2(window.innerWidth, window.innerHeight), 2.0, 1.0, 0]} />\n                <halftonePass attachArray=\"passes\" />\n            </effectComposer>\n        </React.Fragment>\n    )\n}\n\nconst Scene = () => {\n    return (\n        <React.Fragment>\n            <ambientLight />\n            <Box position={[0, 0, 0]} />\n            <Effects />\n        </React.Fragment>\n    )\n}\n\nconst LuminousBox = () => {\n    return (\n        <React.Fragment>\n            <FrontText title=\"Luminous & Halftone Box\" />\n            <CanvasStyle>\n                <Canvas>\n                    <Scene />\n                </Canvas>\n            </CanvasStyle>\n        </React.Fragment>\n    )\n}\n\nexport default LuminousBox;\n"],"sourceRoot":""}