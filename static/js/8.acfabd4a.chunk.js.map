{"version":3,"sources":["../node_modules/three/examples/jsm/postprocessing/Pass.js","../node_modules/three/examples/jsm/shaders/CopyShader.js","components/FrontText.tsx","../node_modules/three/examples/jsm/postprocessing/RenderPass.js","../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","../node_modules/three/examples/jsm/postprocessing/MaskPass.js","../node_modules/three/examples/jsm/postprocessing/EffectComposer.js","../node_modules/three/examples/jsm/shaders/AfterimageShader.js","../node_modules/three/examples/jsm/postprocessing/AfterimagePass.js","pages/tailing-box/TailingBox.tsx"],"names":["Pass","this","enabled","needsSwap","clear","renderToScreen","Object","assign","prototype","setSize","render","console","error","FullScreenQuad","camera","OrthographicCamera","geometry","PlaneBufferGeometry","material","_mesh","Mesh","defineProperty","get","set","value","dispose","renderer","CopyShader","uniforms","vertexShader","join","fragmentShader","theme","css","FrontText","props","title","RenderPass","scene","overrideMaterial","clearColor","clearAlpha","call","undefined","clearDepth","create","constructor","writeBuffer","readBuffer","oldClearColor","oldClearAlpha","oldOverrideMaterial","oldAutoClear","autoClear","getClearColor","getHex","getClearAlpha","setClearColor","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","ShaderPass","shader","textureID","ShaderMaterial","UniformsUtils","clone","defines","fsQuad","texture","MaskPass","inverse","writeValue","clearValue","context","getContext","state","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getSize","Vector2","_pixelRatio","getPixelRatio","_width","width","_height","height","WebGLRenderTarget","name","renderTarget1","renderTarget2","passes","copyPass","clock","Clock","swapBuffers","tmp","addPass","pass","push","insertPass","index","splice","isLastEnabledPass","passIndex","i","length","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","AfterimageShader","AfterimagePass","damp","textureComp","window","innerWidth","innerHeight","NearestFilter","textureOld","shaderMaterial","compFsQuad","MeshBasicMaterial","copyFsQuad","map","temp","extend","Box","mesh","useRef","useState","active","setActive","useFrame","current","rotation","x","y","ref","position","scale","onClick","e","attach","args","Effects","useThree","gl","composer","fog","THREE","useEffect","Fragment","attachArray","Scene","TailingBox"],"mappings":"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","file":"static/js/8.acfabd4a.chunk.js","sourcesContent":["import {\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tMesh\n} from \"../../../build/three.module.js\";\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\n\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\": { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float opacity;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\"\tgl_FragColor = opacity * texel;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { CopyShader };\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nconst theme = css`\n    color: white;\n    position: absolute;\n    top: 2%;\n    left: 5%;\n    z-index: 100;\n    font-family: Sans-Serif;\n`;\n\ninterface FrontTextProps {\n    title: string\n}\n\nconst FrontText: React.FC<FrontTextProps> = (props) => {\n    return (\n        <div css={theme}>\n            <h1>{props.title}</h1>\n        </div >\n    )\n};\n\nexport default FrontText;","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\n};\n\nRenderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: RenderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tvar oldClearColor, oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n} );\n\nexport { RenderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tShaderMaterial,\n\tUniformsUtils\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { ShaderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n} );\n\n\nvar ClearMaskPass = function () {\n\n\tPass.call( this );\n\n\tthis.needsSwap = false;\n\n};\n\nClearMaskPass.prototype = Object.create( Pass.prototype );\n\nObject.assign( ClearMaskPass.prototype, {\n\n\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n} );\n\nexport { MaskPass, ClearMaskPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tClock,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from \"../../../build/three.module.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n","/**\n * @author HypnosNova / https://www.threejs.org.cn/gallery/\n *\n * Afterimage shader\n * I created this effect inspired by a demo on codepen:\n * https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&\n */\n\n\n\nvar AfterimageShader = {\n\n\tuniforms: {\n\n\t\t\"damp\": { value: 0.96 },\n\t\t\"tOld\": { value: null },\n\t\t\"tNew\": { value: null }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float damp;\",\n\n\t\t\"uniform sampler2D tOld;\",\n\t\t\"uniform sampler2D tNew;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"vec4 when_gt( vec4 x, float y ) {\",\n\n\t\t\"\treturn max( sign( x - y ), 0.0 );\",\n\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texelOld = texture2D( tOld, vUv );\",\n\t\t\"\tvec4 texelNew = texture2D( tNew, vUv );\",\n\n\t\t\"\ttexelOld *= damp * when_gt( texelOld, 0.1 );\",\n\n\t\t\"\tgl_FragColor = max(texelNew, texelOld);\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { AfterimageShader };\n","/**\n * @author HypnosNova / https://www.threejs.org.cn/gallery/\n */\n\nimport {\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tNearestFilter,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTarget\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { AfterimageShader } from \"../shaders/AfterimageShader.js\";\n\nvar AfterimagePass = function ( damp ) {\n\n\tPass.call( this );\n\n\tif ( AfterimageShader === undefined )\n\t\tconsole.error( \"AfterimagePass relies on AfterimageShader\" );\n\n\tthis.shader = AfterimageShader;\n\n\tthis.uniforms = UniformsUtils.clone( this.shader.uniforms );\n\n\tthis.uniforms[ \"damp\" ].value = damp !== undefined ? damp : 0.96;\n\n\tthis.textureComp = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\n\t\tminFilter: LinearFilter,\n\t\tmagFilter: NearestFilter,\n\t\tformat: RGBAFormat\n\n\t} );\n\n\tthis.textureOld = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\n\t\tminFilter: LinearFilter,\n\t\tmagFilter: NearestFilter,\n\t\tformat: RGBAFormat\n\n\t} );\n\n\tthis.shaderMaterial = new ShaderMaterial( {\n\n\t\tuniforms: this.uniforms,\n\t\tvertexShader: this.shader.vertexShader,\n\t\tfragmentShader: this.shader.fragmentShader\n\n\t} );\n\n\tthis.compFsQuad = new Pass.FullScreenQuad( this.shaderMaterial );\n\n\tvar material = new MeshBasicMaterial();\n\tthis.copyFsQuad = new Pass.FullScreenQuad( material );\n\n};\n\nAfterimagePass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: AfterimagePass,\n\n\trender: function ( renderer, writeBuffer, readBuffer ) {\n\n\t\tthis.uniforms[ \"tOld\" ].value = this.textureOld.texture;\n\t\tthis.uniforms[ \"tNew\" ].value = readBuffer.texture;\n\n\t\trenderer.setRenderTarget( this.textureComp );\n\t\tthis.compFsQuad.render( renderer );\n\n\t\tthis.copyFsQuad.material.map = this.textureComp.texture;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.copyFsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\n\t\t\tif ( this.clear ) renderer.clear();\n\n\t\t\tthis.copyFsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Swap buffers.\n\t\tvar temp = this.textureOld;\n\t\tthis.textureOld = this.textureComp;\n\t\tthis.textureComp = temp;\n\t\t// Now textureOld contains the latest image, ready for the next frame.\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis.textureComp.setSize( width, height );\n\t\tthis.textureOld.setSize( width, height );\n\n\t}\n\n} );\n\nexport { AfterimagePass };\n","/** @jsx jsx */\nimport React, { useRef, useState, useEffect, MutableRefObject } from 'react';\nimport { extend, Canvas, useFrame, useThree } from 'react-three-fiber';\nimport { css, jsx } from '@emotion/core';\nimport * as THREE from 'three';\n\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { AfterimagePass } from 'three/examples/jsm/postprocessing/AfterimagePass';\nimport { WebGLRenderer, OrthographicCamera, PerspectiveCamera } from 'three';\nimport FrontText from '../../components/FrontText';\n\nextend({ EffectComposer, RenderPass, AfterimagePass })\n\nconst theme = css`\n    width: 100vw;\n    height: 100vh;\n    z-index: -100;\n    background-color: $black;\n`;\n\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            'effectComposer': { children: Element[]; ref: MutableRefObject<EffectComposer | undefined>; args: WebGLRenderer[]; },\n            'renderPass': { attachArray: string; args: (THREE.Scene | OrthographicCamera | PerspectiveCamera)[]; },\n            'afterimagePass': { attachArray: string; },\n        }\n    }\n}\n\ninterface BoxProps {\n    position: [number, number, number];\n};\n\nconst Box: React.FC<BoxProps> = (props) => {\n    const mesh = useRef<THREE.Mesh>();\n    const [active, setActive] = useState(false);\n\n    useFrame(() => {\n        if (mesh.current) {\n            mesh.current.rotation.x += 0.005;\n            mesh.current.rotation.y += 0.01;\n        }\n    })\n\n    return (\n        <mesh\n            ref={mesh}\n            position={props.position}\n            scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n            onClick={e => setActive(!active)}\n        >\n            <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n            <meshNormalMaterial attach=\"material\" />\n        </mesh>\n    );\n};\n\nconst Effects = () => {\n    const { gl, scene, camera, size } = useThree();\n    const composer = useRef<EffectComposer>();\n    scene.fog = new THREE.Fog(0x000000, 1, 1000);\n\n    useEffect(() => {\n        if (composer.current)\n            composer.current.setSize(size.width, size.height)\n    }, [size]);\n\n    useFrame(() => {\n        if (composer.current) {\n            composer.current.render();\n        };\n    }, 10);\n\n    return (\n        <React.Fragment>\n            <effectComposer ref={composer} args={[gl]}>\n                <renderPass attachArray=\"passes\" args={[scene, camera]} />\n                <afterimagePass attachArray=\"passes\" />\n            </effectComposer>\n        </React.Fragment>\n    )\n}\n\nconst Scene = () => {\n    return (\n        <React.Fragment>\n            <ambientLight />\n            <Box position={[0, 0, 0]} />\n            <Effects />\n        </React.Fragment>\n    )\n}\n\nconst TailingBox = () => {\n    return (\n        <React.Fragment>\n            <FrontText title=\"Tailing Box\" />\n            <div css={theme}>\n                <Canvas>\n                    <Scene />\n                </Canvas>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default TailingBox;\n"],"sourceRoot":""}