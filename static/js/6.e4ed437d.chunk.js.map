{"version":3,"sources":["../node_modules/three/examples/jsm/postprocessing/Pass.js","../node_modules/three/examples/jsm/shaders/CopyShader.js","components/FrontText.tsx","../node_modules/three/examples/jsm/postprocessing/RenderPass.js","../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","../node_modules/three/examples/jsm/postprocessing/MaskPass.js","../node_modules/three/examples/jsm/postprocessing/EffectComposer.js","../node_modules/three/examples/jsm/shaders/HalftoneShader.js","../node_modules/three/examples/jsm/postprocessing/HalftonePass.js","pages/halftone-box/HalftoneBox.tsx"],"names":["Pass","this","enabled","needsSwap","clear","renderToScreen","Object","assign","prototype","setSize","render","console","error","FullScreenQuad","camera","OrthographicCamera","geometry","PlaneBufferGeometry","material","_mesh","Mesh","defineProperty","get","set","value","dispose","renderer","CopyShader","uniforms","vertexShader","join","fragmentShader","StyledText","styled","h1","FrontText","props","title","RenderPass","scene","overrideMaterial","clearColor","clearAlpha","call","undefined","clearDepth","create","constructor","writeBuffer","readBuffer","oldClearColor","oldClearAlpha","oldOverrideMaterial","oldAutoClear","autoClear","getClearColor","getHex","getClearAlpha","setClearColor","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","ShaderPass","shader","textureID","ShaderMaterial","UniformsUtils","clone","defines","fsQuad","texture","MaskPass","inverse","writeValue","clearValue","context","getContext","state","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getSize","Vector2","_pixelRatio","getPixelRatio","_width","width","_height","height","WebGLRenderTarget","name","renderTarget1","renderTarget2","passes","copyPass","clock","Clock","swapBuffers","tmp","addPass","pass","push","insertPass","index","splice","isLastEnabledPass","passIndex","i","length","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","HalftoneShader","Math","PI","HalftonePass","params","key","hasOwnProperty","extend","CanvasStyle","div","Box","mesh","useRef","useState","active","setActive","useFrame","current","rotation","x","y","ref","position","scale","onClick","e","attach","args","Effects","useThree","gl","composer","fog","THREE","useEffect","Fragment","attachArray","Scene","HalftoneBox"],"mappings":"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","file":"static/js/6.e4ed437d.chunk.js","sourcesContent":["import {\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tMesh\n} from \"../../../build/three.module.js\";\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\n\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\": { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float opacity;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\"\tgl_FragColor = opacity * texel;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { CopyShader };\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledText = styled.h1`\n    color: white;\n    position: absolute;\n    top: 2%;\n    left: 5%;\n    z-index: 100;\n    font-family: Sans-Serif;\n`;\n\ninterface FrontTextProps {\n    title: string\n}\n\nconst FrontText: React.FC<FrontTextProps> = (props) => {\n    return (\n        <StyledText>{props.title}</StyledText>\n    )\n};\n\nexport default FrontText;","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\n};\n\nRenderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: RenderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tvar oldClearColor, oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n} );\n\nexport { RenderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tShaderMaterial,\n\tUniformsUtils\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { ShaderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n} );\n\n\nvar ClearMaskPass = function () {\n\n\tPass.call( this );\n\n\tthis.needsSwap = false;\n\n};\n\nClearMaskPass.prototype = Object.create( Pass.prototype );\n\nObject.assign( ClearMaskPass.prototype, {\n\n\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n} );\n\nexport { MaskPass, ClearMaskPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tClock,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from \"../../../build/three.module.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n","/**\n * @author meatbags / xavierburrow.com, github/meatbags\n *\n * RGB Halftone shader for three.js.\n *\tNOTE:\n * \t\tShape (1 = Dot, 2 = Ellipse, 3 = Line, 4 = Square)\n *\t\tBlending Mode (1 = Linear, 2 = Multiply, 3 = Add, 4 = Lighter, 5 = Darker)\n */\n\n\n\nvar HalftoneShader = {\n\n\tuniforms: {\n\t\t\"tDiffuse\": { value: null },\n\t\t\"shape\": { value: 1 },\n\t\t\"radius\": { value: 4 },\n\t\t\"rotateR\": { value: Math.PI / 12 * 1 },\n\t\t\"rotateG\": { value: Math.PI / 12 * 2 },\n\t\t\"rotateB\": { value: Math.PI / 12 * 3 },\n\t\t\"scatter\": { value: 0 },\n\t\t\"width\": { value: 1 },\n\t\t\"height\": { value: 1 },\n\t\t\"blending\": { value: 1 },\n\t\t\"blendingMode\": { value: 1 },\n\t\t\"greyscale\": { value: false },\n\t\t\"disable\": { value: false }\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUV;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUV = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"#define SQRT2_MINUS_ONE 0.41421356\",\n\t\t\"#define SQRT2_HALF_MINUS_ONE 0.20710678\",\n\t\t\"#define PI2 6.28318531\",\n\t\t\"#define SHAPE_DOT 1\",\n\t\t\"#define SHAPE_ELLIPSE 2\",\n\t\t\"#define SHAPE_LINE 3\",\n\t\t\"#define SHAPE_SQUARE 4\",\n\t\t\"#define BLENDING_LINEAR 1\",\n\t\t\"#define BLENDING_MULTIPLY 2\",\n\t\t\"#define BLENDING_ADD 3\",\n\t\t\"#define BLENDING_LIGHTER 4\",\n\t\t\"#define BLENDING_DARKER 5\",\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform float radius;\",\n\t\t\"uniform float rotateR;\",\n\t\t\"uniform float rotateG;\",\n\t\t\"uniform float rotateB;\",\n\t\t\"uniform float scatter;\",\n\t\t\"uniform float width;\",\n\t\t\"uniform float height;\",\n\t\t\"uniform int shape;\",\n\t\t\"uniform bool disable;\",\n\t\t\"uniform float blending;\",\n\t\t\"uniform int blendingMode;\",\n\t\t\"varying vec2 vUV;\",\n\t\t\"uniform bool greyscale;\",\n\t\t\"const int samples = 8;\",\n\n\t\t\"float blend( float a, float b, float t ) {\",\n\n\t\t// linear blend\n\t\t\"\treturn a * ( 1.0 - t ) + b * t;\",\n\n\t\t\"}\",\n\n\t\t\"float hypot( float x, float y ) {\",\n\n\t\t// vector magnitude\n\t\t\"\treturn sqrt( x * x + y * y );\",\n\n\t\t\"}\",\n\n\t\t\"float rand( vec2 seed ){\",\n\n\t\t// get pseudo-random number\n\t    \"return fract( sin( dot( seed.xy, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 );\",\n\n\t\t\"}\",\n\n\t\t\"float distanceToDotRadius( float channel, vec2 coord, vec2 normal, vec2 p, float angle, float rad_max ) {\",\n\n\t\t// apply shape-specific transforms\n\t\t\"\tfloat dist = hypot( coord.x - p.x, coord.y - p.y );\",\n\t\t\"\tfloat rad = channel;\",\n\n\t\t\"\tif ( shape == SHAPE_DOT ) {\",\n\n\t\t\"\t\trad = pow( abs( rad ), 1.125 ) * rad_max;\",\n\n\t\t\"\t} else if ( shape == SHAPE_ELLIPSE ) {\",\n\n\t\t\"\t\trad = pow( abs( rad ), 1.125 ) * rad_max;\",\n\n\t\t\"\t\tif ( dist != 0.0 ) {\",\n\t\t\"\t\t\tfloat dot_p = abs( ( p.x - coord.x ) / dist * normal.x + ( p.y - coord.y ) / dist * normal.y );\",\n\t\t\"\t\t\tdist = ( dist * ( 1.0 - SQRT2_HALF_MINUS_ONE ) ) + dot_p * dist * SQRT2_MINUS_ONE;\",\n\t\t\"\t\t}\",\n\n\t\t\"\t} else if ( shape == SHAPE_LINE ) {\",\n\n\t\t\"\t\trad = pow( abs( rad ), 1.5) * rad_max;\",\n\t\t\"\t\tfloat dot_p = ( p.x - coord.x ) * normal.x + ( p.y - coord.y ) * normal.y;\",\n\t\t\"\t\tdist = hypot( normal.x * dot_p, normal.y * dot_p );\",\n\n\t\t\"\t} else if ( shape == SHAPE_SQUARE ) {\",\n\n\t\t\"\t\tfloat theta = atan( p.y - coord.y, p.x - coord.x ) - angle;\",\n\t\t\"\t\tfloat sin_t = abs( sin( theta ) );\",\n\t\t\"\t\tfloat cos_t = abs( cos( theta ) );\",\n\t\t\"\t\trad = pow( abs( rad ), 1.4 );\",\n\t\t\"\t\trad = rad_max * ( rad + ( ( sin_t > cos_t ) ? rad - sin_t * rad : rad - cos_t * rad ) );\",\n\n\t\t\"\t}\",\n\n\t\t\"\treturn rad - dist;\",\n\n\t\t\"}\",\n\n\t\t\"struct Cell {\",\n\n\t\t// grid sample positions\n\t\t\"\tvec2 normal;\",\n\t\t\"\tvec2 p1;\",\n\t\t\"\tvec2 p2;\",\n\t\t\"\tvec2 p3;\",\n\t\t\"\tvec2 p4;\",\n\t\t\"\tfloat samp2;\",\n\t\t\"\tfloat samp1;\",\n\t\t\"\tfloat samp3;\",\n\t\t\"\tfloat samp4;\",\n\n\t\t\"};\",\n\n\t\t\"vec4 getSample( vec2 point ) {\",\n\n\t\t// multi-sampled point\n\t\t\"\tvec4 tex = texture2D( tDiffuse, vec2( point.x / width, point.y / height ) );\",\n\t\t\"\tfloat base = rand( vec2( floor( point.x ), floor( point.y ) ) ) * PI2;\",\n\t\t\"\tfloat step = PI2 / float( samples );\",\n\t\t\"\tfloat dist = radius * 0.66;\",\n\n\t\t\"\tfor ( int i = 0; i < samples; ++i ) {\",\n\n\t\t\"\t\tfloat r = base + step * float( i );\",\n\t\t\"\t\tvec2 coord = point + vec2( cos( r ) * dist, sin( r ) * dist );\",\n\t\t\"\t\ttex += texture2D( tDiffuse, vec2( coord.x / width, coord.y / height ) );\",\n\n\t\t\"\t}\",\n\n\t\t\"\ttex /= float( samples ) + 1.0;\",\n\t\t\"\treturn tex;\",\n\n\t\t\"}\",\n\n\t\t\"float getDotColour( Cell c, vec2 p, int channel, float angle, float aa ) {\",\n\n\t\t// get colour for given point\n\t\t\"\tfloat dist_c_1, dist_c_2, dist_c_3, dist_c_4, res;\",\n\n\t\t\"\tif ( channel == 0 ) {\",\n\n\t\t\"\t\tc.samp1 = getSample( c.p1 ).r;\",\n\t\t\"\t\tc.samp2 = getSample( c.p2 ).r;\",\n\t\t\"\t\tc.samp3 = getSample( c.p3 ).r;\",\n\t\t\"\t\tc.samp4 = getSample( c.p4 ).r;\",\n\n\t\t\"\t} else if (channel == 1) {\",\n\n\t\t\"\t\tc.samp1 = getSample( c.p1 ).g;\",\n\t\t\"\t\tc.samp2 = getSample( c.p2 ).g;\",\n\t\t\"\t\tc.samp3 = getSample( c.p3 ).g;\",\n\t\t\"\t\tc.samp4 = getSample( c.p4 ).g;\",\n\n\t\t\"\t} else {\",\n\n\t\t\"\t\tc.samp1 = getSample( c.p1 ).b;\",\n\t\t\"\t\tc.samp3 = getSample( c.p3 ).b;\",\n\t\t\"\t\tc.samp2 = getSample( c.p2 ).b;\",\n\t\t\"\t\tc.samp4 = getSample( c.p4 ).b;\",\n\n\t\t\"\t}\",\n\n\t\t\"\tdist_c_1 = distanceToDotRadius( c.samp1, c.p1, c.normal, p, angle, radius );\",\n\t\t\"\tdist_c_2 = distanceToDotRadius( c.samp2, c.p2, c.normal, p, angle, radius );\",\n\t\t\"\tdist_c_3 = distanceToDotRadius( c.samp3, c.p3, c.normal, p, angle, radius );\",\n\t\t\"\tdist_c_4 = distanceToDotRadius( c.samp4, c.p4, c.normal, p, angle, radius );\",\n\t\t\"\tres = ( dist_c_1 > 0.0 ) ? clamp( dist_c_1 / aa, 0.0, 1.0 ) : 0.0;\",\n\t\t\"\tres += ( dist_c_2 > 0.0 ) ? clamp( dist_c_2 / aa, 0.0, 1.0 ) : 0.0;\",\n\t\t\"\tres += ( dist_c_3 > 0.0 ) ? clamp( dist_c_3 / aa, 0.0, 1.0 ) : 0.0;\",\n\t\t\"\tres += ( dist_c_4 > 0.0 ) ? clamp( dist_c_4 / aa, 0.0, 1.0 ) : 0.0;\",\n\t\t\"\tres = clamp( res, 0.0, 1.0 );\",\n\n\t\t\"\treturn res;\",\n\n\t\t\"}\",\n\n\t\t\"Cell getReferenceCell( vec2 p, vec2 origin, float grid_angle, float step ) {\",\n\n\t\t// get containing cell\n\t\t\"\tCell c;\",\n\n\t\t// calc grid\n\t\t\"\tvec2 n = vec2( cos( grid_angle ), sin( grid_angle ) );\",\n\t\t\"\tfloat threshold = step * 0.5;\",\n\t\t\"\tfloat dot_normal = n.x * ( p.x - origin.x ) + n.y * ( p.y - origin.y );\",\n\t\t\"\tfloat dot_line = -n.y * ( p.x - origin.x ) + n.x * ( p.y - origin.y );\",\n\t\t\"\tvec2 offset = vec2( n.x * dot_normal, n.y * dot_normal );\",\n\t\t\"\tfloat offset_normal = mod( hypot( offset.x, offset.y ), step );\",\n\t\t\"\tfloat normal_dir = ( dot_normal < 0.0 ) ? 1.0 : -1.0;\",\n\t\t\"\tfloat normal_scale = ( ( offset_normal < threshold ) ? -offset_normal : step - offset_normal ) * normal_dir;\",\n\t\t\"\tfloat offset_line = mod( hypot( ( p.x - offset.x ) - origin.x, ( p.y - offset.y ) - origin.y ), step );\",\n\t\t\"\tfloat line_dir = ( dot_line < 0.0 ) ? 1.0 : -1.0;\",\n\t\t\"\tfloat line_scale = ( ( offset_line < threshold ) ? -offset_line : step - offset_line ) * line_dir;\",\n\n\t\t// get closest corner\n\t\t\"\tc.normal = n;\",\n\t\t\"\tc.p1.x = p.x - n.x * normal_scale + n.y * line_scale;\",\n\t\t\"\tc.p1.y = p.y - n.y * normal_scale - n.x * line_scale;\",\n\n\t\t// scatter\n\t\t\"\tif ( scatter != 0.0 ) {\",\n\n\t\t\"\t\tfloat off_mag = scatter * threshold * 0.5;\",\n\t\t\"\t\tfloat off_angle = rand( vec2( floor( c.p1.x ), floor( c.p1.y ) ) ) * PI2;\",\n\t\t\"\t\tc.p1.x += cos( off_angle ) * off_mag;\",\n\t\t\"\t\tc.p1.y += sin( off_angle ) * off_mag;\",\n\n\t\t\"\t}\",\n\n\t\t// find corners\n\t\t\"\tfloat normal_step = normal_dir * ( ( offset_normal < threshold ) ? step : -step );\",\n\t\t\"\tfloat line_step = line_dir * ( ( offset_line < threshold ) ? step : -step );\",\n\t\t\"\tc.p2.x = c.p1.x - n.x * normal_step;\",\n\t\t\"\tc.p2.y = c.p1.y - n.y * normal_step;\",\n\t\t\"\tc.p3.x = c.p1.x + n.y * line_step;\",\n\t\t\"\tc.p3.y = c.p1.y - n.x * line_step;\",\n\t\t\"\tc.p4.x = c.p1.x - n.x * normal_step + n.y * line_step;\",\n\t\t\"\tc.p4.y = c.p1.y - n.y * normal_step - n.x * line_step;\",\n\n\t\t\"\treturn c;\",\n\n\t\t\"}\",\n\n\t\t\"float blendColour( float a, float b, float t ) {\",\n\n\t\t// blend colours\n\t\t\"\tif ( blendingMode == BLENDING_LINEAR ) {\",\n\t\t\"\t\treturn blend( a, b, 1.0 - t );\",\n\t\t\"\t} else if ( blendingMode == BLENDING_ADD ) {\",\n\t\t\"\t\treturn blend( a, min( 1.0, a + b ), t );\",\n\t\t\"\t} else if ( blendingMode == BLENDING_MULTIPLY ) {\",\n\t\t\"\t\treturn blend( a, max( 0.0, a * b ), t );\",\n\t\t\"\t} else if ( blendingMode == BLENDING_LIGHTER ) {\",\n\t\t\"\t\treturn blend( a, max( a, b ), t );\",\n\t\t\"\t} else if ( blendingMode == BLENDING_DARKER ) {\",\n\t\t\"\t\treturn blend( a, min( a, b ), t );\",\n\t\t\"\t} else {\",\n\t\t\"\t\treturn blend( a, b, 1.0 - t );\",\n\t\t\"\t}\",\n\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tif ( ! disable ) {\",\n\n\t\t// setup\n\t\t\"\t\tvec2 p = vec2( vUV.x * width, vUV.y * height );\",\n\t\t\"\t\tvec2 origin = vec2( 0, 0 );\",\n\t\t\"\t\tfloat aa = ( radius < 2.5 ) ? radius * 0.5 : 1.25;\",\n\n\t\t// get channel samples\n\t\t\"\t\tCell cell_r = getReferenceCell( p, origin, rotateR, radius );\",\n\t\t\"\t\tCell cell_g = getReferenceCell( p, origin, rotateG, radius );\",\n\t\t\"\t\tCell cell_b = getReferenceCell( p, origin, rotateB, radius );\",\n\t\t\"\t\tfloat r = getDotColour( cell_r, p, 0, rotateR, aa );\",\n\t\t\"\t\tfloat g = getDotColour( cell_g, p, 1, rotateG, aa );\",\n\t\t\"\t\tfloat b = getDotColour( cell_b, p, 2, rotateB, aa );\",\n\n\t\t// blend with original\n\t\t\"\t\tvec4 colour = texture2D( tDiffuse, vUV );\",\n\t\t\"\t\tr = blendColour( r, colour.r, blending );\",\n\t\t\"\t\tg = blendColour( g, colour.g, blending );\",\n\t\t\"\t\tb = blendColour( b, colour.b, blending );\",\n\n\t\t\"\t\tif ( greyscale ) {\",\n\t\t\"\t\t\tr = g = b = (r + b + g) / 3.0;\",\n\t\t\"\t\t}\",\n\n\t\t\"\t\tgl_FragColor = vec4( r, g, b, 1.0 );\",\n\n\t\t\"\t} else {\",\n\n\t\t\"\t\tgl_FragColor = texture2D( tDiffuse, vUV );\",\n\n\t\t\"\t}\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { HalftoneShader };\n","/**\n * @author meatbags / xavierburrow.com, github/meatbags\n *\n * RGB Halftone pass for three.js effects composer. Requires HalftoneShader.\n *\n */\n\nimport {\n\tShaderMaterial,\n\tUniformsUtils\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { HalftoneShader } from \"../shaders/HalftoneShader.js\";\n\nvar HalftonePass = function ( width, height, params ) {\n\n\tPass.call( this );\n\n \tif ( HalftoneShader === undefined ) {\n\n \t\tconsole.error( 'THREE.HalftonePass requires HalftoneShader' );\n\n \t}\n\n \tthis.uniforms = UniformsUtils.clone( HalftoneShader.uniforms );\n \tthis.material = new ShaderMaterial( {\n \t\tuniforms: this.uniforms,\n \t\tfragmentShader: HalftoneShader.fragmentShader,\n \t\tvertexShader: HalftoneShader.vertexShader\n \t} );\n\n\t// set params\n\tthis.uniforms.width.value = width;\n\tthis.uniforms.height.value = height;\n\n\tfor ( var key in params ) {\n\n\t\tif ( params.hasOwnProperty( key ) && this.uniforms.hasOwnProperty( key ) ) {\n\n\t\t\tthis.uniforms[ key ].value = params[ key ];\n\n\t\t}\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nHalftonePass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: HalftonePass,\n\n\trender: function ( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n \t\tthis.material.uniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\n \t\tif ( this.renderToScreen ) {\n\n \t\t\trenderer.setRenderTarget( null );\n \t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n \t\t\trenderer.setRenderTarget( writeBuffer );\n \t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n \t},\n\n \tsetSize: function ( width, height ) {\n\n \t\tthis.uniforms.width.value = width;\n \t\tthis.uniforms.height.value = height;\n\n \t}\n} );\n\nexport { HalftonePass };\n","import React, { useRef, useState, useEffect, MutableRefObject } from 'react';\nimport { extend, Canvas, useFrame, useThree } from 'react-three-fiber';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\n\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { HalftonePass } from 'three/examples/jsm/postprocessing/HalftonePass';\nimport { WebGLRenderer, OrthographicCamera, PerspectiveCamera } from 'three';\nimport FrontText from '../../components/FrontText';\n\nextend({ EffectComposer, RenderPass, HalftonePass })\n\nconst CanvasStyle = styled.div`\n    width: 100vw;\n    height: 100vh;\n    z-index: -100;\n    background-color: $black;\n`;\n\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            'effectComposer': { children: Element[]; ref: MutableRefObject<EffectComposer | undefined>; args: WebGLRenderer[]; },\n            'renderPass': { attachArray: string; args: (THREE.Scene | OrthographicCamera | PerspectiveCamera)[]; },\n            'halftonePass': { attachArray: string; },\n        }\n    }\n}\n\ninterface BoxProps {\n    position: [number, number, number];\n};\n\nconst Box: React.FC<BoxProps> = (props) => {\n    const mesh = useRef<THREE.Mesh>();\n    const [active, setActive] = useState(false);\n\n    useFrame(() => {\n        if (mesh.current) {\n            mesh.current.rotation.x += 0.005;\n            mesh.current.rotation.y += 0.01;\n        }\n    })\n\n    return (\n        <mesh\n            ref={mesh}\n            position={props.position}\n            scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n            onClick={e => setActive(!active)}\n        >\n            <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n            <meshNormalMaterial attach=\"material\" />\n        </mesh>\n    );\n};\n\nconst Effects = () => {\n    const { gl, scene, camera, size } = useThree();\n    const composer = useRef<EffectComposer>();\n    scene.fog = new THREE.Fog(0x000000, 1, 1000);\n\n    useEffect(() => {\n        if (composer.current)\n            composer.current.setSize(size.width, size.height)\n    }, [size]);\n\n    useFrame(() => {\n        if (composer.current) {\n            composer.current.render();\n        };\n    }, 10);\n\n    return (\n        <React.Fragment>\n            <effectComposer ref={composer} args={[gl]}>\n                <renderPass attachArray=\"passes\" args={[scene, camera]} />\n                <halftonePass attachArray=\"passes\" />\n            </effectComposer>\n        </React.Fragment>\n    )\n}\n\nconst Scene = () => {\n    return (\n        <React.Fragment>\n            <ambientLight />\n            <Box position={[0, 0, 0]} />\n            <Effects />\n        </React.Fragment>\n    )\n}\n\nconst HalftoneBox = () => {\n    return (\n        <React.Fragment>\n            <FrontText title=\"Halftone Box\" />\n            <CanvasStyle>\n                <Canvas>\n                    <Scene />\n                </Canvas>\n            </CanvasStyle>\n        </React.Fragment>\n    )\n}\n\nexport default HalftoneBox;\n"],"sourceRoot":""}